name: gen_nuxt_static_website
description: 生成 Nuxt 4 + Nuxt UI 静态网站开发方案和示例代码
arguments:
  - name: theme
    description: 网站主题（如博客、电商、作品集等）
    required: true
messages:
  - role: user
    content:
      type: text
      text: |
        你是一名经验丰富的前端工程师，专门使用 Nuxt 4 + Nuxt UI 3 开发现代静态网站。
        我给你一个主题，你的任务是生成一个完整的静态网站开发方案和示例代码，并严格按照以下项目结构设计：
        
        要求：所有输出必须严格遵循以下项目结构，且示例代码应当可以直接运行，形成最小可行版本。 尽可能 配合 Context7 MCP 服务器 阅读 Nuxt4 的文档和 Nuxt UI 3 的官方文档。 

        **项目结构限定**：

        /components      # 所有可复用组件，如 Card、Button、Navbar 等  
        /layouts         # 页面布局文件，如 default.vue、home.vue  
        /pages           # 页面文件，自动生成路由，如 index.vue、movies.vue、movies/[id].vue  
        /assets          # 静态资源，如图片、字体、图标  
        /data            # 静态数据或 Markdown 文件，用于生成页面内容  
        /plugins         # Nuxt 插件（如全局组件注册或工具函数）  
        /public          # 公共静态资源（如 favicon、robots.txt）  
        /nuxt.config.ts  # Nuxt 配置文件  
        /package.json    # 项目依赖  
        /app.vue         # 应用入口文件 (根组件)
        /README.md       # 项目说明文档
        /.github/workflows # GitHub Actions 工作流（可选）

        **输出内容（逐条生成）**：

        1. **网站定位与目标用户**  
            - 目标人群（年龄、兴趣、行业）  
            - 网站用途与核心价值  
            - 差异化卖点与特色    

        2. **网站页面结构规划**  
           - 列出主要页面（主页、列表页、详情页、关于页、联系页等）  
           - 每个页面简述内容、功能和用户交互设计  

        3. **页面布局与组件设计**  
           - 使用 **Nuxt UI** 组件（Card、Button、Grid、Navbar、Form、Modal 等）  
           - 每个页面说明布局思路：  
               - 导航栏（Navbar）位置  
               - 主内容区（Grid + Card）  
               - 页脚（Footer）  
               - 提供组件组合示例（如：首页 = Navbar + Hero Banner + Grid + Footer）  
           - 响应式设计方案（移动端、平板、桌面端适配策略）  

        4. **功能模块设计**  
           - 如果功能单一，可以直接设计到一个页面中  
           - 例如：联系表单可以直接放在关于页中  
           - 数据管理方式说明（静态 Markdown、JSON 或 API 数据源）  
           - 提供组件与数据交互示例  

        5. **路由设计与数据管理**  
           - Nuxt 4 路由结构及数据加载方式（静态生成 / API 拉取）  
           - 示例代码展示如何从 /data 或 Markdown 加载内容到页面  

        6. **SEO 和性能优化**  
           - 页面 meta 标签、OG 标签设置  
           - 图片优化、懒加载、代码拆分  
           - 静态生成和缓存策略  

        7. **代码示例**  
           - 完整 Nuxt 4 项目结构示例（严格按上述结构）  
           - Nuxt UI 3 组件示例代码  
           - 页面示例代码（主页、列表页、详情页）  
           - 静态内容管理示例（Markdown / JSON 数据）  
           - 提供最小可运行版本，保证复制即可启动  

        8. **部署方案**  
           - 推荐使用 GitHub Pages  
           - 提供静态生成配置和部署示例  

        **输出要求**：

        - 输出内容条理清晰，分点列出  
        - 页面风格现代、简洁、响应式，兼顾可读性和美观  
        - 所有示例尽量可直接运行，形成最小可行 Nuxt 4 + Nuxt UI 3 静态网站  
        - 输出使用 Markdown 格式，方便查看和复制  
        - 每个示例代码块需标明文件路径，如 `/pages/index.vue`  

        主题是：{{theme}}
